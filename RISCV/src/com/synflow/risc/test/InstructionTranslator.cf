/*
 * Copyright (c) 2012-2014, Synflow SAS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of Synflow nor the names of its contributors may be
 *     used to endorse or promote products derived from this software without
 *     specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package com.synflow.risc;
import com.synflow.risc.RISCV_Definitions.*;

task InstructionTranslator {

	in u8 unused;

	/*u32 lw(reg_t rd, reg_t rs1, imm12_t imm12) {
		return rd << 27 | rs1 << 22 | imm12 << 10 | 0b010 << 7 | RISCV_LOAD;
	}*/
	void add(reg_t rd, reg_t rs1, reg_t rs2) {
		print("add ", rd, " ", rs1, " ", rs2);
		print(rd << 27 | rs1 << 22 | rs2 << 17 | RISCV_OP);
	}

	void addi(reg_t rd, reg_t rs1, imm12_t imm) {
		print("addi ", rd, " ", rs1, " ", imm);
		print(rd << 27 | rs1 << 22 | imm << 10 | RISCV_OP_IMM);
	}

	void nop() {
		addi(0, 0, 0);
	}

	/**
 * Task
 */
	void setup() {
		addi(1, 0, 5);
		addi(2, 0, 8);
		nop();
		nop();
		nop();
		add(3, 1, 2);
	}

	void loop() {
	}

}
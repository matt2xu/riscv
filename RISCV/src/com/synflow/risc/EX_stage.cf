/*
 * Copyright (c) 2012-2014, Synflow SAS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of Synflow nor the names of its contributors may be
 *     used to endorse or promote products derived from this software without
 *     specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package com.synflow.risc;
import com.synflow.risc.RISCV_Definitions.*;

task EX_stage {

	in data_t val1, val2, reg_t rd, flags_t flags_i, imm12_t imm;
	out data_t addr, value, reg_t rd_o, flags_t flags_o;

	void loop() {
		flags_t flags = flags_i.read;
		print("flags: ", flags);

		data_t val1_i = val1.read, val2_i = val2.read;
		imm12_t imm_i = imm.read;

		print("val1 = ", val1_i, " & val2 = ", val2_i);
		print("imm = ", imm_i);

		signed_data_t signExtendedImm = imm_i;
		data_t op1 = val1_i, op2 = flags[HAS_IMM] ? signExtendedImm : val2_i;
		data_t res = (data_t) (op1 + op2);

		data_t value = 0, addr = 0;
		if (flags[LOAD] || flags[STORE]) {
			addr = res;
		}

		if (flags[STORE]) {
			value = val2_i;
		} else {
			value = res;
		}

		print("addr = ", addr);
		print("value = ", value);
		addr.write(addr);
		value.write(value);
		rd_o.write(rd.read);
		flags_o.write(flags);
	}
}
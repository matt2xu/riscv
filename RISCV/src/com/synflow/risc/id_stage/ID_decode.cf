/*
 * Copyright (c) 2013 Matthieu
 * All rights reserved.
 */
import RISCV_Definitions;

/*
 * Input and output ports
 */
port in data_t instr, out reg_t rd, flags_t flags, func_t func, imm12_t imm;

/**
 * Task
 */
void main() {
	data_t instr = instr.read;
	u7 opcode = instr;

	flags_t flags = 0;
	flags[LOAD] = opcode == RISCV_LOAD;
	flags[STORE] = opcode == RISCV_STORE;

	imm12_t imm = 0;
	print("opcode = ", opcode);
	if (opcode == RISCV_OP_IMM || opcode == RISCV_OP_IMM_32 || opcode == RISCV_LOAD) {
		imm = instr >> 10;
		flags[HAS_IMM] = true;
	} else if (opcode == RISCV_STORE) {
		imm = (instr >> 20) | ((instr >> 10) & 0x7F);
		flags[HAS_IMM] = true;
	}
	print("imm = ", imm);

	// most instructions have a destination register
	// except those
	reg_t rd;
	if (opcode == RISCV_STORE || opcode == RISCV_BRANCH ||
		opcode == RISCV_J || opcode == RISCV_JAL) {
		rd = 0;
	} else {
		rd = instr >> 27;
	}

	rd.write(rd);
	print("flags: ", flags);
	flags.write(flags);
	imm.write(imm);
}

/*
 * Copyright (c) 2012-2014, Synflow SAS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of Synflow nor the names of its contributors may be
 *     used to endorse or promote products derived from this software without
 *     specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package com.synflow.risc.id_stage;
import com.synflow.risc.RISCV_Definitions.*;

task ID_decode {

	in data_t instr;
	out reg_t rd, flags_t flags, func_t func, imm12_t imm;

	void loop() {
		data_t instr = instr.read;
		u7 opcode = (u7) (instr);

		flags_t flags = 0;
		flags[LOAD] = opcode == RISCV_LOAD;
		flags[STORE] = opcode == RISCV_STORE;

		imm12_t imm = 0;
		print("opcode = ", opcode);
		if (opcode == RISCV_OP_IMM || opcode == RISCV_OP_IMM_32 || opcode == RISCV_LOAD) {
			imm = (i12) (instr >> 10);
			flags[HAS_IMM] = true;
		} else if (opcode == RISCV_STORE) {
			imm = (instr >> 20) | ((instr >> 10) & 0x7F);
			flags[HAS_IMM] = true;
		}
		print("imm = ", imm);

		// most instructions have a destination register
		// except those
		reg_t rd;
		if (opcode == RISCV_STORE || opcode == RISCV_BRANCH || opcode == RISCV_J || opcode == RISCV_JAL) {
			rd = 0;
		} else {
			rd = instr >> 27;
		}

		rd.write(rd);
		print("flags: ", flags);
		flags.write(flags);
		imm.write(imm);
	}
}
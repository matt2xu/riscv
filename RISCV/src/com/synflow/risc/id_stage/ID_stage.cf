/*
 * Copyright (c) 2012-2014, Synflow SAS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of Synflow nor the names of its contributors may be
 *     used to endorse or promote products derived from this software without
 *     specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package com.synflow.risc.id_stage;

import com.synflow.risc.RISCV_Definitions.*;

network ID_stage {
	in data_t instr, reg_t previous_rd, sync data_t previous_data;
	out data_t val1, val2, reg_t rd, flags_t flags, func_t func, imm12_t imm;

	decode_rs = new com.synflow.risc.id_stage.ID_decode_rs();
	decode_rs.reads(instr);

	regFile = new com.synflow.risc.id_stage.RegFile();
	regFile.reads(decode_rs.rs1, decode_rs.rs2, control_rd.rd_o, control_rd.data_o);

	decode = new com.synflow.risc.id_stage.ID_decode();
	decode.reads(instr);

	control_rd = new com.synflow.risc.id_stage.ID_control_rd();
	control_rd.reads(previous_rd, previous_data);

	this.reads(regFile.op1, regFile.op2, decode.rd, decode.flags, decode.func, decode.imm);
}
